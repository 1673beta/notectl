services:
  notectl-dev:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspaces/notectl-dev
    working_dir: /workspaces/notectl-dev:cached
    command: sleep infinity
    networks:
      - internal_network
      - external_network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - misskey
    networks:
      - internal_network
      - external_network

  misskey:
    image: misskey/misskey:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports: ["3000:3000"]  # enable this if you want to access directly
    networks:
      - internal_network
      - external_network
    volumes:
      - ./misskey/.config/default.yml:/misskey/.config/default.yml:ro
      - ./misskey/files:/misskey/files
    environment:
      - VIRTUAL_HOST=~^.*$$  # marker for lb
      - VIRTUAL_PORT=3000  # target port for lb

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    volumes:
      - ./redis1:/data
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      retries: 20

  db:
    restart: always
    image: postgres:15-alpine
    networks:
      - internal_network
    env_file:
      - docker.env
    volumes:
      - ./pg1:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      interval: 5s
      retries: 20

  meilisearch:
    restart: unless-stopped
    image: getmeili/meilisearch:latest
    ports:
      - "7700:7700"
    environment:
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=production
      - MEILI_MASTER_KEY=FN6sKuqo5nF8OTAj4kE3NDTZ
    networks:
      - internal_network
      - external_network
    volumes:
      - ./meilisearch:/meili_data

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./minio_data:/data
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - internal_network
      - external_network

  create_bucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: |
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/notectl;
      /usr/bin/mc anonymous set public minio/notectl;
      exit 0;"

networks:
  internal_network:
    internal: true
  external_network:
